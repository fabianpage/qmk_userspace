/* #include "keymap_swiss_de.h" */
//include "./keycodes_fabian.h"
#define CH_Z KC_Y
#define CH_DLR KC_NUHS // $
#define CH_AE CH_ADIA
#define CH_OE CH_ODIA
#define CH_UE CH_UDIA
#define CH_Y KC_Z
#define CH_QST S(KC_MINS)

//COMB(ESC,     KC_ESC,  KC_I, KC_U)
//COMB(BSPC,    KC_BSPC, KC_P, KC_O)
//COMB(TO_ALPHA,TO(0),   KC_I, KC_O)
//COMB(SPC,     KC_SPACE,KC_E, KC_R)
//COMB(ENTER,   KC_ENTER,KC_S, KC_A)
//COMB(CAPS,    QK_CAPS_WORD_TOGGLE, KC_C,  KC_L)
//COMB(US,OSM(MOD_LSFT), KC_U, KC_R)
//COMB(LS,OSM(MOD_LSFT), KC_S, KC_D)
//COMB(UG,OSM(MOD_LGUI), KC_I, KC_E)
//COMB(LG,OSM(MOD_LGUI), KC_A, KC_L)
COMB(BOOT,QK_BOOT,   KC_R, KC_E,KC_A,KC_S)

COMB(GA,OSM(MOD_LGUI), KC_T, KC_N)
//COMB(GB,KC_MPRV, KC_Z, KC_G)
//COMB(GN,KC_HOME, CH_DOT, KC_LEFT)

COMB(CA,OSM(MOD_LCTL), KC_N, KC_H)
//COMB(CB,KC_VOLD, KC_G, KC_B)
//COMB(CN,C(KC_LEFT), KC_LEFT, CH_ASTR)

COMB(AA,OSM(MOD_LALT), KC_U, KC_R)
//COMB(AB,KC_MPLY, KC_M, KC_F)
//COMB(AN,KC_PGDN, CH_COLN, KC_DOWN)

COMB(ACAPS,    QK_CAPS_WORD_TOGGLE, KC_R,  KC_V)
//COMB(BCAPS,    KC_MUTE, KC_F,  KC_J)
//COMB(NCAPS,    C(KC_DOWN), KC_DOWN,  CH_PERC)

COMB(AESC,    KC_ESC, KC_I,  KC_E)
//COMB(BESC,    KC_MNXT, KC_W,  CH_OE)
//COMB(NESC,    KC_PGUP, CH_COMM,  KC_UP)

COMB(ASPACE,    KC_SPACE, KC_E,  KC_C)
//COMB(BSPACE,    KC_VOLU, CH_OE,  KC_K)
//COMB(NSPACE,    C(KC_UP), KC_UP,  CH_DLR)

COMB(ACOMM,    KC_TAB, KC_A,  KC_L)
//COMB(BCOMM,    CH_COMM, CH_AE,  CH_Y)
//COMB(NCOMM,    C(KC_RIGHT), KC_RIGHT,  CH_BSLS)

COMB(ADEL,    KC_DEL, KC_O,  KC_A)
//COMB(BDEL,    KC_DEL, KC_Q,  CH_AE)
//COMB(NDEL,    KC_END, CH_SCLN,  KC_RIGHT)

COMB(ABSPC,    KC_BSPC, KC_P,  KC_S)
//COMB(BBSPC,    KC_BSPC, KC_X,  CH_UE)
//COMB(NBSPC,    KC_BSPC, CH_CIRC,  CH_AT)

COMB(AENTER,    KC_ENTER, KC_S,  KC_D)
//COMB(BENTER,    KC_ENTER, CH_UE, KC_TAB)
//COMB(NENTER,    KC_ENTER, CH_AT, CH_SLSH)

COMB(REP,     CH_Z, KC_T, KC_U)
COMB(K0,      KC_G, KC_N, KC_R)
COMB(AREP,    KC_B, KC_H, KC_V)

COMB(K7,     KC_M, KC_U, KC_I)
COMB(K1,     KC_F, KC_R, KC_E)
COMB(K4,     KC_J, KC_V, KC_C)

COMB(K8,     KC_W, KC_I, KC_O)
COMB(K2,     KC_2, KC_E, KC_A)
COMB(K5,     KC_K, KC_C, KC_L)

COMB(K9,     KC_X, KC_O, KC_P)
COMB(K3,     KC_Q, KC_A, KC_S)
COMB(K6,     CH_Y, KC_L, KC_D)


COMB(EQL, CH_EQL,  CH_Z  , KC_1)
COMB(AMPR, CH_AMPR,  KC_1  , KC_2)
//COMB(CH_,  KC_W  , KC_Q)
//COMB(,  KC_Q  , KC_X)
COMB(QUES, CH_QUES,  KC_0  , KC_4)
COMB(EXLM, CH_EXLM,  KC_4  , KC_5)
COMB(QUOT, CH_QUOT,  KC_5 , KC_6)
COMB(DQUO, CH_DQUO,  KC_6 , CH_OE)
COMB(HASH, CH_HASH,  KC_TAB  , KC_7)
COMB(TILD, CH_TILD,  KC_7  , KC_8)
COMB(GRV, CH_GRV,  KC_8  , CH_9)
COMB(ACUT, CH_ACUT,  KC_9  ,  CH_UE)


//COMB(UNDS, CH_UNDS, KC_DOWN ,  KC_UP)
//COMB(MINS, CH_MINS, KC_UP   ,  KC_RIGHT)

//COMB(LPRN, CH_RPRN, CH_0  ,  CH_1)
//COMB(LPRNB, CH_LPRN, CH_N, CH_U)
//COMB(LCBR, CH_RCBR, CH_4 ,  CH_2)
//COMB(LCBRB, CH_LCBR, CH_R , CH_I )
//COMB(LBRC, CH_RBRC, KC_TAB ,  CH_4)
//COMB(LBRCB, CH_LBRC, CH_H , CH_R )
//COMB(LABK, CH_RABK, CH_7 ,  CH_5)
//COMB(LABKB, CH_LABK, CH_V , CH_E )
//CH_, KC_LEFT ,  KC_DOWN)
//, KC_RIGHT,  CH_AT)
//COMB(RPRN, CH_RPRN, CH_ASTR ,  CH_PERC)
//COMB(RPRNB, CH_RPRN, CH_G , CH_M )
//COMB(RCBR, CH_RCBR, CH_PERC ,  CH_DLR)
//COMB(RCBRB, CH_RCBR, CH_F , CH_W )
//COMB(RBRC, CH_RBRC, CH_DLR  ,  CH_BSLS)
//COMB(RBRCB, CH_RBRC, CH_B , CH_F )
//COMB(RABK, CH_RABK, CH_BSLS ,  CH_SLSH)
//COMB(RABKB, CH_RABK, CH_J , CH_OE )

COMB(LPRNB, CH_LPRN, CH_N, CH_U)
COMB(LBRCB, CH_LBRC, CH_H , CH_R )
COMB(COMM, CH_COMM, CH_R , CH_I )
COMB(SCLN, CH_SCLN, CH_V , CH_E )


COMB(C_CH_DOT, CH_DOT, CH_I , CH_A )
COMB(C_CH_COLN, CH_COLN, CH_E , CH_L )
COMB(C_CH_UNDS, CH_UNDS, CH_O , CH_S )
COMB(C_CH_MINS, CH_MINS, CH_A , CH_D )

COMB(bLPRN,  CH_LCBR, CH_N, CH_U, CH_I)
COMB(bLBRC,  CH_RCBR, CH_T, CH_U, CH_E)

COMB(bLPRNB, CH_LABK, CH_H, CH_R, CH_E)
COMB(bLBRCB, CH_RABK, CH_N, CH_R, CH_C)

COMB(bLCBR,  CH_LPRN, CH_R, CH_I, CH_O)
COMB(bLABK,  CH_RPRN, CH_U, CH_I, CH_A)

COMB(bLCBRB, CH_LBRC, CH_V, CH_E, CH_A)
COMB(bLABKB, CH_RBRC, CH_R, CH_E, CH_L)

